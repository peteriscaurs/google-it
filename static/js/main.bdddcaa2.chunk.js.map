{"version":3,"sources":["components/AddSearchQuery.js","components/SearchQuery.js","components/SearchQueryList.js","components/EmptySearchQueryList.js","components/History.js","components/App.js","models/SearchQueryStore.js","serviceWorker.js","index.js"],"names":["AddSearchQuery","state","text","handleChange","event","_this","setState","target","value","handleSubmit","props","addSearchQuery","toUpperCase","react_default","a","createElement","className","onSubmit","this","placeholder","type","onChange","React","Component","SearchQuery","_ref","searchQuery","href","concat","split","join","toLowerCase","rel","onClick","complete","SearchQueryList","searchQueryList","map","completed","components_SearchQuery","key","id","History","completedCount","App","store","activeCount","components_AddSearchQuery","src_components_SearchQueryList","searchQueries","components_History","EmptySearchQueryList","types","model","identifierNumber","string","actions","self","SearchQueryStore","array","views","reduce","count","length","maxId","todo","Math","max","unshift","Boolean","window","location","hostname","match","snapshotListener","snapshot","localStorageKey","initialState","localStorage","getItem","JSON","parse","destroy","create","onSnapshot","setItem","stringify","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdddcaa2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass AddSearchQuery extends React.Component {\r\n    state = {\r\n        text: ''\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ text: event.target.value });\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        if (this.state.text) {\r\n            this.props.addSearchQuery(this.state.text.toUpperCase())\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"add-search-query-form m-5 row\">\r\n                <form\r\n                    className=\"mx-auto\"\r\n                    onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        className=\"form-control-lg\"\r\n                        placeholder=\"what's on your mind?\"\r\n                        type='text'\r\n                        onChange={this.handleChange}\r\n                        value={this.state.text} />\r\n                    <button\r\n                        className='btn btn-lg btn-deep-orange ml-3'\r\n                        type='submit'\r\n                    >add</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddSearchQuery;\r\n","import React from 'react';\r\n\r\nconst SearchQuery = ({ searchQuery }) => {\r\n    const handleComplete = () => {\r\n        searchQuery.complete();\r\n    }\r\n\r\n    return (\r\n        <div className='search-query row p-3'>\r\n            <a\r\n                className=\"mx-auto text-light\"\r\n                href={`https://www.google.lv/search?q=${searchQuery.text.split(' ').join('+').toLowerCase()}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                onClick={handleComplete}>\r\n                {searchQuery.text}\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchQuery;\r\n","import React from 'react';\r\nimport SearchQuery from './SearchQuery';\r\nimport './SearchQueryList.css';\r\n\r\nconst SearchQueryList = ({ searchQueryList }) => {\r\n    return (\r\n        <div className=\"search-query-list z-depth-5\">\r\n            <div className=\"row p-3\">\r\n                <h2 className=\"text-light mx-auto\">GOOGLE IT</h2>\r\n            </div>\r\n            {\r\n                searchQueryList.map(searchQuery => {\r\n                    if (!searchQuery.completed) {\r\n                        return <SearchQuery\r\n                            key={searchQuery.id}\r\n                            searchQuery={searchQuery}\r\n                        />\r\n                    }\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchQueryList;\r\n","import React from 'react';\r\nimport './SearchQueryList.css';\r\n\r\nconst SearchQueryList = ({ searchQueryList }) => {\r\n    return (\r\n        <div className=\"search-query-list z-depth-5\">\r\n            <div className=\"row p-3\">\r\n                <h2 className=\"text-light mx-auto\">SEARCH QUERY LIST IS EMPTY</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchQueryList;\r\n","import React from 'react'\r\nimport SearchQuery from './SearchQuery';\r\nimport './SearchQueryList.css';\r\n\r\nconst History = ({ completedCount, searchQueryList }) => {\r\n    if (completedCount) {\r\n        return (\r\n            <div className=\"search-query-list z-depth-5 mt-5 mb-5\">\r\n                <div className=\"row p-3\">\r\n                    <h2 className=\"text-light mx-auto\">HISTORY</h2>\r\n                </div>\r\n                {\r\n                    searchQueryList.map(searchQuery => {\r\n                        if (searchQuery.completed) {\r\n                            return <SearchQuery\r\n                                key={searchQuery.id}\r\n                                searchQuery={searchQuery}\r\n                            />\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default History;\r\n","import React from 'react';\nimport AddSearchQuery from './AddSearchQuery';\nimport SearchQueryList from './SearchQueryList';\nimport EmptySearchQueryList from './EmptySearchQueryList';\nimport History from './History';\n\nconst App = ({ store }) => {\n  if (store.activeCount) {\n    return (\n      <div className='container'>\n        <AddSearchQuery addSearchQuery={store.addSearchQuery} />\n        <SearchQueryList searchQueryList={store.searchQueries} />\n        <History completedCount={store.completedCount} searchQueryList={store.searchQueries} />\n      </div>\n    );\n  } else {\n    return (\n      <div className='container'>\n        <AddSearchQuery addSearchQuery={store.addSearchQuery} />\n        <EmptySearchQueryList />\n        <History completedCount={store.completedCount} searchQueryList={store.searchQueries} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { types } from 'mobx-state-tree';\r\n\r\nconst SearchQuery = types\r\n    .model('SearchQuery', {\r\n        id: types.identifierNumber,\r\n        text: types.string,\r\n        completed: false\r\n    })\r\n    .actions(self => ({\r\n        complete() {\r\n            if (!self.completed) {\r\n                self.completed = !self.completed;\r\n            }\r\n        }\r\n    }));\r\n\r\nconst SearchQueryStore = types\r\n    .model('SearchQueryStore', {\r\n        searchQueries: types.array(SearchQuery),\r\n    })\r\n    .views(self => ({\r\n        get completedCount() {\r\n            return self.searchQueries.reduce((count, searchQuery) => (searchQuery.completed ? count + 1 : count), 0)\r\n        },\r\n        get activeCount() {\r\n            return self.searchQueries.length - self.completedCount\r\n        }\r\n    }))\r\n    .actions(self => ({\r\n        addSearchQuery(text) {\r\n            const id = self.searchQueries.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1\r\n            self.searchQueries.unshift({\r\n                id,\r\n                text\r\n            })\r\n        }\r\n    }));\r\n\r\n// export default SearchQueryStore;\r\nexport default SearchQueryStore;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport SearchQueryStore from './models/SearchQueryStore';\nimport { getSnapshot, destroy, onSnapshot } from 'mobx-state-tree';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nconst localStorageKey = \"google-it\";\n\nconst initialState = localStorage.getItem(localStorageKey)\n    ? JSON.parse(localStorage.getItem(localStorageKey))\n    : { searchQueries: [] }\n\nlet store;\nlet snapshotListener;\nfunction createSearchQueryStore(snapshot) {\n    if (snapshotListener) snapshotListener()\n    if (store) destroy(store)\n\n    store = SearchQueryStore.create(snapshot)\n\n    snapshotListener = onSnapshot(store, snapshot =>\n        localStorage.setItem(localStorageKey, JSON.stringify(snapshot))\n    );\n\n    return store\n}\n\nfunction renderApp(App, store) {\n    ReactDOM.render(<App store={store} />, document.getElementById(\"root\"))\n}\n\nrenderApp(App, createSearchQueryStore(initialState))\n\nif (module.hot) {\n    module.hot.accept([\"./models/SearchQueryStore\"], () => {\n        renderApp(App, createSearchQueryStore(getSnapshot(store)))\n    })\n    module.hot.accept([\"./components/App\"], () => {\n        renderApp(App, store)\n    })\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}